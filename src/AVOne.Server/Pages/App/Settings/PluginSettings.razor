@page "/app/settings/plugin"
@inherits ProCompontentBase
@using AVOne.Common.Plugins;
<MCard>
    <MCardText>
        <MTabs Color="blue accent-4">
                <MTab>@(I18n.T("Settings.Plugin.InstalledPlugin.Title"))</MTab>
                <MTab>@(I18n.T("Settings.Plugin.AvaliablePlugin.Title"))</MTab>
                <MTab>@(I18n.T("Settings.Plugin.PluginRepository.Title"))</MTab>
            <MTabItem>
                 <MContainer Fluid>
                    <MRow Dense>
                        @foreach (var item in InstalledPlugins)
                    {
                            <MCol key="@item.Id" Cols="3" >
                                <MCard Class="mx-auto my-12" MaxWidth="468" Elevation=8>
                                    @if (item.GetPluginInfo().HasImage)
                                    {
                                        <MImage Src="@GetPluginUrl(item)" Class="white--text align-end" Height=180 Gradient="to bottom, rgba(0,0,0,.1), rgba(0,0,0,.5)">
                                            <MCardTitle>@item.Name</MCardTitle>
                                        </MImage>
                                    }
                                    else
                                    {
                                        <MImage Src="https://cdn.masastack.com/stack/images/website/masa-blazor/parallax/material.jpg" Class="white--text align-end" Height=180 Gradient="to bottom, rgba(0,0,0,.1), rgba(0,0,0,.5)">
                                            <MCardTitle>@item.Name</MCardTitle>
                                        </MImage>
                                    }
                                        <div class="d-flex flex-no-wrap justify-space-between">
                                            <div>
                                        <Masa.Blazor.Presets.PBlockText Primary="@item.GetPluginInfo().Description" Tags="@GetPluginTags(item)" Class="pa-2" style="max-width: 300px;"></Masa.Blazor.Presets.PBlockText>
                                            </div>
                                            <div class="pa-2">
                                            <MMenu Bottom Right OffsetX=true CloseOnClick=true CloseOnContentClick=true>
                    <ActivatorContent>
                        <MButton
                            Icon
                            @attributes="@context.Attrs">
                            <MIcon>mdi-dots-vertical</MIcon>
                        </MButton>
                    </ActivatorContent>

                    <ChildContent>
                        <MList>
                                   @if(item.IsEnabledAndSupported && item.Manifest.Status == PluginStatus.Active){
                                        <MListItem Link @onclick="@(e => DisablePlugin(item))">            
                                        <MListItemTitle>
                                             @(I18n.T("Settings.Plugin.InstalledPlugin.DisablePlugins"))
                                        </MListItemTitle>
                                           </MListItem>
                                    }
                                    else if(item.Manifest.Status == PluginStatus.Disabled)
                                    {
                                        <MListItem Link @onclick="@(e => EnablePlugin(item))">
                                        <MListItemTitle >
                                           @(I18n.T("Settings.Plugin.InstalledPlugin.EnablePlugins"))
                                        </MListItemTitle>                                        
                                        </MListItem>
                                    }

                                <MListItem Link @onclick="@(e => DeletePlugin(item))">
                                        <MListItemTitle >
                                             @(I18n.T("Settings.Plugin.InstalledPlugin.DeletePlugins"))
                                        </MListItemTitle>
                                </MListItem>                                
                        </MList>
                    </ChildContent>
                </MMenu>
                                                </div>
                                        </div>
                            </MCard>
                            </MCol>
                    }
                </MRow>
                </MContainer>
            </MTabItem>
            <MTabItem>
                <MContainer Fluid>
                    <MRow Dense>
                        @foreach (var package in PackageInfos)
                    {
                            <MCol key="@package.Id" Cols="3" >
                                <MCard Class="mx-auto my-12 ml-12" MaxWidth="468" Elevation=8>
                                    @if (!string.IsNullOrWhiteSpace(package.ImageUrl))
                                    {
                                        <MImage Src=@package.ImageUrl Class="white--text align-end" Height=180 Gradient="to bottom, rgba(0,0,0,.1), rgba(0,0,0,.5)">
                                            <MCardTitle>@package.Name</MCardTitle>
                                        </MImage>
                                    }
                                    else
                                    {
                                        <MImage Src="https://cdn.masastack.com/stack/images/website/masa-blazor/parallax/material.jpg" Class="white--text align-end" Height=180 Gradient="to bottom, rgba(0,0,0,.1), rgba(0,0,0,.5)">
                                            <MCardTitle>@package.Name</MCardTitle>
                                        </MImage>
                                    }

                                        <Masa.Blazor.Presets.PBlockText Primary="@package.Description" Tags="@GetPackageTags(package)" Class="pa-2" style="max-width: 300px;"></Masa.Blazor.Presets.PBlockText>
                            </MCard>
                            </MCol>
                    }
                </MRow>
                </MContainer>
            </MTabItem>
            <MTabItem>
                <div class="md-flex flex-no-wrap justify-start pt-6 pl-6">
                    <span class="text-h5">@T("Settings.Plugin.PluginRepository.Title")</span>
                    
                        <MDialog
        @bind-Value="addRepoDialog"
        Width="500">
        <ActivatorContent>
            <MButton  @attributes="@context.Attrs" Outlined Class="ml-2" Icon><MIcon Dark>mdi-plus</MIcon></MButton>
             </ActivatorContent>
        <ChildContent>
               <MCard>
                 <MForm Model="_addRepoModel" EnableValidation OnValidSubmit="HandleOnValidSubmit" 
                                         OnInvalidSubmit="HandleOnInvalidSubmit">
                <MCardTitle>
                    <span class="text-h5">@T("Settings.Plugin.PluginRepository.AddRepo")</span>
                </MCardTitle>
                    <MCardText>

                <MTextField Class="mt-2" @bind-Value="_addRepoModel.Name"
                Counter="20"
                Label='@T("Settings.Plugin.PluginRepository.RepoName")' Hint='@T("Settings.Plugin.PluginRepository.RepoNameHint")' PersistentHint
                            Outlined></MTextField>
                <MTextField Class="mt-2" @bind-Value="_addRepoModel.RepoUrl"
                Label='@T("Settings.Plugin.PluginRepository.RepoUrl")' Hint='@T("Settings.Plugin.PluginRepository.RepoUrlHint")' PersistentHint
                            Outlined></MTextField>
                          

                    </MCardText>
                    <MCardActions Class="justify-end">
                        <MButton Type="reset" @onclick="()=> {addRepoDialog = false;}">@T("Common.Cancel")</MButton>
                        <MButton Type="submit" Color="primary">@T("Common.Submit")</MButton>
                    </MCardActions>
                 </MForm>
                </MCard>
           
                    </ChildContent>
    </MDialog>
                </div>
                   <MList>
                @foreach (var repo in PluginRepositories)
                {
                    <MDivider></MDivider>
                    <MListItem>
                         <ItemContent>
                        <MListItemContent>
                            <MListItemTitle>@repo.Name</MListItemTitle>
                            <MListItemSubtitle>@repo.Url</MListItemSubtitle>
                        </MListItemContent>
                         <MListItemAction>
                            <div class="d-flex flex-no-wrap align-center">
                                <MButton @onclick="() => RemovePluginRepo(repo)" Color="red" Outlined Class="ml-2 mr-4" Icon><MIcon>mdi-delete</MIcon></MButton>
                                @if(repo.Enabled){
                                    <MButton @onclick="() => UpdatePluginRepo(repo)" Color='error' Class="ml-2 mr-4" Elevation="2">@T("Common.Disable")</MButton>
                                }else{
                                    <MButton @onclick="() => UpdatePluginRepo(repo)" Color='success' Class="ml-2 mr-4" Elevation="2">@T("Common.Enable")</MButton>
                                }
                             </div>
                            </MListItemAction>                   
                         </ItemContent>

                    </MListItem>
                }
                   </MList>
            </MTabItem>
        </MTabs>
    </MCardText>
    <MSnackbar @bind-Value="_snackbar"
                Timeout="2000" Dark>
        <ChildContent>
            @message
        </ChildContent>
        <ActionContent>
            <MButton Color="blue"
                     Text
                     OnClick="()=>_snackbar = false">
                Close
            </MButton>
        </ActionContent>
    </MSnackbar>
</MCard>

@code {

    bool addRepoDialog;
    bool _snackbar;
    string message;

    public void ShowSnackbar(string msg)
    {
        message = msg;
        _snackbar = true;
    }
    public void ShowSnackbarLocal(string msgKey, params object[] args)
    {
        message = string.Format(I18n.T(msgKey), args);
        _snackbar = true;
    }

    class AddRepoModel
    {
        [Required]
        [MaxLength(20, ErrorMessage = "Name must be less than 20 characters")]
        public string Name { get; set; }
        [Required]
        [Url]
        public string RepoUrl { get; set; }
    }

    private bool _valid = true;
    private MForm _form;
    private AddRepoModel _addRepoModel = new();

    private void HandleOnValidSubmit()
    {
        //valid

        this.AddPluginRepo(_addRepoModel);
        addRepoDialog = false;
    }

    private void HandleOnInvalidSubmit()
    {
        //invalid
    }
}
