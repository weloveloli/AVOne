@using AVOne.Impl.Data;
@using AVOne.Impl.Job;
@using AVOne.Models.Download
@inherits ProCompontentBase
<MNavigationDrawer Fixed Temporary Right Value=Value ValueChanged=ValueChanged Width="600">
    <MCol Md="12">
        <MCard class="pa-2 fill-height d-flex flex-column justify-space-between">
            <MCardTitle class="text-caption">
                <div class="text-h5 mt-6">@T("Download.Detail.Info")</div>
            </MCardTitle>
            <MCardText class="pl-4 pr-4">
                <MDivider></MDivider>
                <div class="text-subtitle-1 mt-3 mb-3">@T("Download.Detail.JobInfo")</div>
                <MSelect Outlined Label=@T("Download.Detail.Tags") Multiple @bind-Value=SelectItem.Tags TItem="SelectData"
                         TValue="List<string>" TItemValue="string" Items=@_tagList ItemText="i => i.Label"
                         ItemValue="i => i.Value">
                    <SelectionContent Context="_context">
                        <MChip Style="height:32px;border-radius:32px;" Outlined Close CloseIcon="mdi-close" TextColor="@GetColorForTag(_context.Item.Value)"
                               OnCloseClick="()=>HandleCloseClick(_context.Item.Label)">@_context.Item.Label</MChip>
                    </SelectionContent>
                    </MSelect>
                    <div class="text-subtitle-1 mt-3 mb-3">@T("Download.Detail.DownloadSpeedInfo")</div>
                    <MList Dense class="pointer-events-none ml-n4 mr-n4">
                    <MListItem>
                        <MListItemTitle class="text-caption">@T("Download.Detail.TotalSize")</MListItemTitle>
                        <MListItemTitle class="text-right text-btn neutral-lighten-1--text"> @DownloadProgressEventArgs.FormatFileSize(_job?.TotalBytes??0L) </MListItemTitle>
                    </MListItem>
                    <MListItem>
                        <MListItemTitle class="text-caption">@T("Download.Detail.Speed")</MListItemTitle>
                        <MListItemTitle class="text-right text-btn neutral-lighten-1--text">@DownloadProgressEventArgs.FormatFileSize(_job?.Speed??0L)/s </MListItemTitle>
                    </MListItem>
                </MList>
                @if (_job is not null && !string.IsNullOrEmpty(_job.FinalFilePath))
                {
                    <div class="text-subtitle-1 mt-3 mb-3">@T("Download.Detail.FileInfo")</div>
                    <MList Dense class="pointer-events-none ml-n4 mr-n4">
                    <MListItem>
                        <MListItemTitle class="text-caption">@T("Download.Detail.FinalDir")</MListItemTitle>
                        <MListItemTitle class="text-right text-btn neutral-lighten-1--text"> @Directory.GetParent(_job.FinalFilePath)!.FullName </MListItemTitle>
                    </MListItem>
                    <MListItem ThreeLine>
                        <MListItemTitle class="text-caption">@T("Download.Detail.FinalFileName")</MListItemTitle>
                        <MListItemSubtitle class="text-right text-btn neutral-lighten-1--text"> @Path.GetFileName(_job.FinalFilePath) </MListItemSubtitle>
                    </MListItem>
                    </MList>
                }

            </MCardText>
            <MCardActions class="d-flex justify-center mb-10">
                <MButton Large Depressed class="primary text-capitalize rounded-pill"
                         OnClick="async ()=>{ await SaveTask();}">
                    @T("Download.Detail.Save")
                </MButton>
                </MCardActions>
                </MCard>
                </MCol>
                </MNavigationDrawer>

                @code {

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public JobModel? SelectItem { get; set; }

    private DownloadAVJob? _job;

    [Inject]
    public JobRepository JobRepository { get; set; }

    protected override void OnInitialized()
    {
        _tagList = new List<SelectData>{
            new SelectData() { Label = T("Download.Tags.Censored"), Value = "Censored" },
            new SelectData() { Label = T("Download.Tags.Uncensored"), Value = "Uncensored" },
            new SelectData() { Label = T("Download.Tags.Chinese"), Value = "Chinese" },
            new SelectData() { Label = T("Download.Tags.ChineseSub"), Value = "ChineseSub" },
            new SelectData() { Label = T("Download.Tags.Taiwanese"), Value = "Taiwanese" },
            new SelectData() { Label = T("Download.Tags.Japanese"), Value = "Japanese" },
            new SelectData() { Label = T("Download.Tags.Catoon"), Value = "Catoon" },
            new SelectData() { Label = T("Download.Tags.US"), Value = "US" },
            new SelectData() { Label = T("Download.Tags.Other"), Value = "Other" },
        };
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectItem is not null && SelectItem.Extra != null)
        {
            _job = new DownloadAVJob();
            _job.FromModel(SelectItem);
        }
    }

    private Dictionary<string, string> _tagColorMap = new Dictionary<string, string>()
    {
        { "Censored", "purple" },
        { "Uncensored", "#05CD99" },
        { "Chinese", "#FFB547" },
        { "ChineseSub", "warn" },
        { "Taiwanese", "#FF5252" },
        { "Japanese", "#4318FF" },
        { "Catoon", "#05CD99" },
        { "US", "#FFB547" },
        {  "Other", "cyan" }
    };

    public string GetColorForTag(string tagStr)
    {
        if (string.IsNullOrEmpty(tagStr) && !_tagColorMap.ContainsKey(tagStr))
        {
            return "grey";
        }
        return _tagColorMap[tagStr];
    }

    private List<SelectData> _tagList = new List<SelectData>();
    private void HandleCloseClick(string lable)
    {
        SelectItem.Tags.Remove(lable);
    }

    private async Task SaveTask()
    {
        JobRepository.UpsertJob(SelectItem);
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(false);
        }
    }
}


