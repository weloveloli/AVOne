@using AVOne.Impl.Job;
@using AVOne.Models.Download;
@using AVOne.Providers;
@inherits ProCompontentBase
<MNavigationDrawer Permanent Class="rounded-4" Width="300" Style="overflow: visible;">
    <MDialog @bind-Value="addTaskDialog"
             Width="500">
        <ActivatorContent>
            <MButton Class="ma-6 rounded-pill" Style="width:-webkit-fill-available;" @attributes="@context.Attrs" Dark Color="primary">@T("Settings.Download.Tasks.AddTask")</MButton>
        </ActivatorContent>
        <ChildContent>
            <MCard>
                <MForm Model="_addJobModel" EnableValidation OnValidSubmit="HandleOnValidSubmit">
                    <MCardTitle>
                        <span class="text-h5">@T("Settings.Plugin.PluginRepository.AddRepo")</span>
                    </MCardTitle>
                    <MCardText>
                        <MTextField Class="mt-2" @bind-Value="_addJobModel.Url"
                                    Label='@T("Settings.Plugin.PluginRepository.RepoUrl")' Hint='@T("Settings.Plugin.PluginRepository.RepoUrlHint")' PersistentHint
                                        Outlined></MTextField>
                    </MCardText>
                    <MCardActions Class="justify-end">
                        <MButton Type="reset" @onclick="()=> {addTaskDialog = false;}">@T("Common.Cancel")</MButton>
                        <MButton Type="submit" Color="primary">@T("Common.Submit")</MButton>
                    </MCardActions>
                </MForm>
            </MCard>

        </ChildContent>
    </MDialog>

    <MList Linkage Dense Class="remover-ripple">
        <TaskNavItem Href="/app/todo" Icon="mdi-email-outline" Title="My Task"></TaskNavItem>
        <TaskNavItem Href="/app/todo/important" Icon="mdi-star-outline" Title="Important"></TaskNavItem>
        <TaskNavItem Href="/app/todo/completed" Icon="mdi-check" Title="Completed"></TaskNavItem>
        <TaskNavItem Href="/app/todo/deleted" Icon="mdi-delete-outline" Title="Deleted"></TaskNavItem>

        <MRow NoGutters Justify="JustifyTypes.SpaceBetween">
            <MSubheader Class="px-6 my-6 text-subtitle neutral-lighten-4--text">Tags</MSubheader>
            <MIcon Class="px-6 my-6" Small Color="#A3AED0">fas fa-plus</MIcon>
        </MRow>

            <TaskNavItem Href="/app/todo/team" Icon="fas fa-circle" IconColor="purple" Title="Team"></TaskNavItem>
            <TaskNavItem Href="/app/todo/low" Icon="fas fa-circle" IconColor="#05CD99" Title="Low"></TaskNavItem>
            <TaskNavItem Href="/app/todo/medium" Icon="fas fa-circle" IconColor="#FFB547" Title="Medium"></TaskNavItem>
            <TaskNavItem Href="/app/todo/high" Icon="fas fa-circle" IconColor="#FF5252" Title="High"></TaskNavItem>
            <TaskNavItem Href="/app/todo/update" Icon="fas fa-circle" IconColor="#4318FF" Title="Update"></TaskNavItem>
    </MList>
</MNavigationDrawer>

@code {
    bool addTaskDialog;
    class AddJobModel
    {
        [Required]
        [Url]
        public string? Url { get; set; }
    }

    private AddJobModel _addJobModel = new();

    private void HandleOnValidSubmit()
    {
        //valid

        this.AddDownloadJob(_addJobModel);
        addTaskDialog = false;
    }
    [Inject]
    public IProviderManager ProviderManager { get; set; }

    [Inject]
    public JobManager JobManager { get; set; }

    private async Task AddDownloadJob(AddJobModel addJobModel)
    {
        var jobItems = ProviderManager.GetMediaExtractorProviders(addJobModel.Url);
        var extractorProvider = jobItems.FirstOrDefault();
        if (extractorProvider is null)
        {
            return;
        }

        var item = await extractorProvider.ExtractAsync(addJobModel.Url);
        var jobItem = item.FirstOrDefault();
        if (jobItem is null)
        {
            return;
        }
        var opt = new DownloadOpts { ThreadCount = 4, OutputDir = "D:\\tmp", RetryCount = 1, RetryWait = 500 };
        var downloadJob = new DownloadAVJob();
        downloadJob.DownloadableItem = jobItem;
        downloadJob.DownloadOpts = opt;
        JobManager.AddJob(downloadJob);
        JobManager.ExecuteJob(downloadJob);
    }
}