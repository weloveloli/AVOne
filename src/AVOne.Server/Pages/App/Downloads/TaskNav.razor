@using AVOne.Impl.Job;
@using AVOne.Models.Download;
@using AVOne.Providers;
@using AVOne.Configuration;
@using Furion.TaskQueue;
@inherits ProCompontentBase
<MNavigationDrawer Permanent Class="rounded-4" Width="300" Style="overflow: visible;">
    <MDialog @bind-Value="addTaskDialog"
             Width="500">
        <ActivatorContent>
            <MButton Class="ma-6 rounded-pill" Style="width:-webkit-fill-available;" @attributes="@context.Attrs" Dark Color="primary">@T("Download.Tasks.AddTask")</MButton>
        </ActivatorContent>
        <ChildContent>
            <MCard>
                <MForm Model="_addJobModel" EnableValidation OnValidSubmit="HandleOnValidSubmit">
                    <MCardTitle>
                        <span class="text-h5">@T("Download.Tasks.AddTask")</span>
                    </MCardTitle>
                    <MCardText>
                        <MTextField Class="mt-2" @bind-Value="_addJobModel.Url"
                                    Label='@T("Download.Tasks.AddTaskUrl")' Hint='@T("Download.Tasks.AddTaskUrlHint")' PersistentHint
                                        Outlined></MTextField>
                        <MTextField Class="mt-2" @bind-Value="_addJobModel.ThreadCount"
                                    Label='@T("Download.Tasks.AddTaskThreadCount")' PersistentHint
                                        Outlined></MTextField>
                        <MTextField Class="mt-2" @bind-Value="_addJobModel.RetryCount"
                                    Label='@T("Download.Tasks.AddTaskRetryCount")' PersistentHint
                                        Outlined></MTextField>
                    </MCardText>
                    <MCardActions Class="justify-end">
                        <MButton Type="reset" @onclick="()=> {addTaskDialog = false;}">@T("Common.Cancel")</MButton>
                        <MButton Type="submit" Color="primary">@T("Common.Submit")</MButton>
                    </MCardActions>
                </MForm>
            </MCard>

        </ChildContent>

    </MDialog>

    <MList Linkage Dense Class="remover-ripple">
        @* <TaskNavItem Icon="mdi-check-all" Title="Download.Status.All"></TaskNavItem> *@
        @* <TaskNavItem Status=0 Icon="mdi-sync" Title="Download.Status.Pending"></TaskNavItem> *@
        <TaskNavItem Status="downloading" Icon="mdi-play-box-outline" Default Title="Download.Status.Downloading"></TaskNavItem>
        <TaskNavItem Status="completed" Icon="mdi-check" Title="Download.Status.Completed"></TaskNavItem>
        <TaskNavItem Status="canceled" Icon="mdi-delete" Title="Download.Status.Canceled"></TaskNavItem>

        <MRow NoGutters Justify="JustifyTypes.SpaceBetween">
            <MSubheader Class="px-6 my-6 text-subtitle neutral-lighten-4--text">Tags</MSubheader>
            @* <MIcon Class="px-6 my-6" Small Color="#A3AED0">fas fa-plus</MIcon> *@
        </MRow>
        <TaskNavItem Tag="Censored" Icon="fas fa-circle" IconColor="purple" Title="Download.Tags.Censored"></TaskNavItem>
        <TaskNavItem Tag="Uncensored" Icon="fas fa-circle" IconColor="#05CD99" Title="Download.Tags.Uncensored"></TaskNavItem>
        <TaskNavItem Tag="Chinese" Icon="fas fa-circle" IconColor="#FFB547" Title="Download.Tags.Chinese"></TaskNavItem>
        <TaskNavItem Tag="ChineseSub" Icon="fas fa-circle" IconColor="warn" Title="Download.Tags.ChineseSub"></TaskNavItem>
        <TaskNavItem Tag="Taiwanese" Icon="fas fa-circle" IconColor="#FF5252" Title="Download.Tags.Taiwanese"></TaskNavItem>
        <TaskNavItem Tag="Japanese" Icon="fas fa-circle" IconColor="#4318FF" Title="Download.Tags.Japanese"></TaskNavItem>
        <TaskNavItem Tag="Catoon" Icon="fas fa-circle" IconColor="#05CD99" Title="Download.Tags.Catoon"></TaskNavItem>
        <TaskNavItem Tag="US" Icon="fas fa-circle" IconColor="#FFB547" Title="Download.Tags.US"></TaskNavItem>
        <TaskNavItem Tag="Other" Icon="fas fa-circle" IconColor="cyan" Title="Download.Tags.Other"></TaskNavItem>
        </MList>
        </MNavigationDrawer>

        @code {

    [Inject]
    private NavigationManager Navigation { get; set; }

    [Inject]
    private IConfigurationManager ConfigurationManager { get; set; }

    [Inject]
    public IProviderManager ProviderManager { get; set; }

    [Inject]
    public IJobManager JobManager { get; set; }

    bool addTaskDialog;
    class AddJobModel
    {
        [Required]
        [Url]
        public string? Url { get; set; }

        [Range(1, 8)]
        public int? ThreadCount { get; set; }

        [Range(1, 8)]
        public int? RetryCount { get; set; }
    }

    protected override void OnInitialized()
    {
        _addJobModel.ThreadCount = ConfigurationManager.CommonConfiguration.DownloadConfig.DefaultDownloadThreadCount;
        _addJobModel.RetryCount = ConfigurationManager.CommonConfiguration.DownloadConfig.DefaultRetryCount;
    }

    private AddJobModel _addJobModel = new();

    private async Task HandleOnValidSubmit()
    {
        await InvokeAsync(async () =>
        {
            addTaskDialog = false;
            StateHasChanged();
            await this.AddDownloadJob(_addJobModel);
        });
    }

    private async Task AddDownloadJob(AddJobModel addJobModel)
    {
        this.ShowLoading("Download.Tasks.ExtractingMedia", false, 5000, addJobModel.Url!);
        var jobItems = ProviderManager.GetMediaExtractorProviders(addJobModel.Url!);
        var extractorProvider = jobItems.FirstOrDefault();
        if (extractorProvider is null)
        {
            var failedReason = T("Download.Tasks.FailedReason.NoExtrator", addJobModel.Url!);
            this.Error("Download.Tasks.Message.AddTaskFailed", addJobModel.Url!, failedReason);
            return;
        }

        var item = await extractorProvider.ExtractAsync(addJobModel.Url!);
        var jobItem = item.FirstOrDefault();
        if (jobItem is null)
        {
            var failedReason = T("Download.Tasks.FailedReason.GetDownloadItemFailed", addJobModel.Url!);
            this.Error("Download.Tasks.Message.AddTaskFailed", addJobModel.Url!, failedReason);
            return;
        }
        this.CloseLoading();
        var downloadDir = ConfigurationManager.CommonConfiguration.DownloadConfig.DefaultDownloadDir;
        var threadCount = ConfigurationManager.CommonConfiguration.DownloadConfig.DefaultDownloadThreadCount;
        var opt = new DownloadOpts { ThreadCount = addJobModel.ThreadCount ?? 4, OutputDir = downloadDir, RetryCount = addJobModel.RetryCount ?? 1, RetryWait = 500 };
        var downloadJob = new DownloadAVJob();
        downloadJob.DownloadableItem = jobItem;
        downloadJob.DownloadOpts = opt;
        JobManager.AddJob(downloadJob);
        await JobManager.EnqueueJob(downloadJob);
        Navigation.NavigateTo(GlobalVariables.DefaultRoute, true);
    }
}